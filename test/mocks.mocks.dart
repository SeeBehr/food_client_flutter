// Mocks generated by Mockito 5.3.2 from annotations
// in food_client/test/mocks.dart.
// Do not manually edit this file.

// ignore_for_file: no_leading_underscores_for_library_prefixes
import 'dart:async' as _i8;

import 'package:flutter/material.dart' as _i9;
import 'package:food_client/services/navigation_service/navigation_service.dart'
    as _i7;
import 'package:food_client/services/recipe_language_service/recipe_language_service.dart'
    as _i6;
import 'package:food_client/services/web_client/web_client_service.dart' as _i3;
import 'package:food_client/ui/home/home_web_client_service.dart' as _i4;
import 'package:food_client/ui/single_recipe/single_recipe_web_client_service.dart'
    as _i5;
import 'package:fpdart/fpdart.dart' as _i2;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types
// ignore_for_file: subtype_of_sealed_class

class _FakeTaskEither_0<L, R> extends _i1.SmartFake
    implements _i2.TaskEither<L, R> {
  _FakeTaskEither_0(
    Object parent,
    Invocation parentInvocation,
  ) : super(
          parent,
          parentInvocation,
        );
}

/// A class which mocks [WebClientServiceAggregator].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebClientServiceAggregator extends _i1.Mock
    implements _i3.WebClientServiceAggregator {
  MockWebClientServiceAggregator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.TaskEither<Exception,
      List<_i4.HomeWebClientModelRecipe>> fetchAllRecipes({
    required String? country,
    _i2.Option<int>? limit = const _i2.None(),
    _i2.Option<int>? take = const _i2.None(),
    _i2.Option<List<String>>? tags = const _i2.None(),
    _i2.Option<List<String>>? cuisines = const _i2.None(),
    _i2.Option<List<String>>? ingredients = const _i2.None(),
    _i2.Option<String>? searchTerm = const _i2.None(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllRecipes,
          [],
          {
            #country: country,
            #limit: limit,
            #take: take,
            #tags: tags,
            #cuisines: cuisines,
            #ingredients: ingredients,
            #searchTerm: searchTerm,
          },
        ),
        returnValue:
            _FakeTaskEither_0<Exception, List<_i4.HomeWebClientModelRecipe>>(
          this,
          Invocation.method(
            #fetchAllRecipes,
            [],
            {
              #country: country,
              #limit: limit,
              #take: take,
              #tags: tags,
              #cuisines: cuisines,
              #ingredients: ingredients,
              #searchTerm: searchTerm,
            },
          ),
        ),
      ) as _i2.TaskEither<Exception, List<_i4.HomeWebClientModelRecipe>>);
  @override
  _i2.TaskEither<Exception,
      List<_i4.HomeWebClientModelCuisine>> fetchAllCuisines({
    required String? country,
    _i2.Option<int>? take = const _i2.None(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllCuisines,
          [],
          {
            #country: country,
            #take: take,
          },
        ),
        returnValue:
            _FakeTaskEither_0<Exception, List<_i4.HomeWebClientModelCuisine>>(
          this,
          Invocation.method(
            #fetchAllCuisines,
            [],
            {
              #country: country,
              #take: take,
            },
          ),
        ),
      ) as _i2.TaskEither<Exception, List<_i4.HomeWebClientModelCuisine>>);
  @override
  _i2.TaskEither<Exception, List<_i4.HomeWebClientModelTag>> fetchAllTags({
    required String? country,
    _i2.Option<int>? take = const _i2.None(),
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #fetchAllTags,
          [],
          {
            #country: country,
            #take: take,
          },
        ),
        returnValue:
            _FakeTaskEither_0<Exception, List<_i4.HomeWebClientModelTag>>(
          this,
          Invocation.method(
            #fetchAllTags,
            [],
            {
              #country: country,
              #take: take,
            },
          ),
        ),
      ) as _i2.TaskEither<Exception, List<_i4.HomeWebClientModelTag>>);
  @override
  _i2.TaskEither<Exception, _i5.SingleRecipeWebClientModelRecipe>
      fetchSingleRecipe({required String? recipeId}) => (super.noSuchMethod(
            Invocation.method(
              #fetchSingleRecipe,
              [],
              {#recipeId: recipeId},
            ),
            returnValue: _FakeTaskEither_0<Exception,
                _i5.SingleRecipeWebClientModelRecipe>(
              this,
              Invocation.method(
                #fetchSingleRecipe,
                [],
                {#recipeId: recipeId},
              ),
            ),
          ) as _i2.TaskEither<Exception, _i5.SingleRecipeWebClientModelRecipe>);
}

/// A class which mocks [RecipeLanguageServiceAggregator].
///
/// See the documentation for Mockito's code generation for more information.
class MockRecipeLanguageServiceAggregator extends _i1.Mock
    implements _i6.RecipeLanguageServiceAggregator {
  MockRecipeLanguageServiceAggregator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  List<String> getSupportedRecipeLanguages() => (super.noSuchMethod(
        Invocation.method(
          #getSupportedRecipeLanguages,
          [],
        ),
        returnValue: <String>[],
      ) as List<String>);
}

/// A class which mocks [NavigationServiceAggregator].
///
/// See the documentation for Mockito's code generation for more information.
class MockNavigationServiceAggregator extends _i1.Mock
    implements _i7.NavigationServiceAggregator {
  MockNavigationServiceAggregator() {
    _i1.throwOnMissingStub(this);
  }

  @override
  void goBack({Uri? fallbackUri}) => super.noSuchMethod(
        Invocation.method(
          #goBack,
          [],
          {#fallbackUri: fallbackUri},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void goBackToNamed({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #goBackToNamed,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void replaceWithNamed({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #replaceWithNamed,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void navigateToNamed({required Uri? uri}) => super.noSuchMethod(
        Invocation.method(
          #navigateToNamed,
          [],
          {#uri: uri},
        ),
        returnValueForMissingStub: null,
      );
  @override
  void showSnackBar({required String? message}) => super.noSuchMethod(
        Invocation.method(
          #showSnackBar,
          [],
          {#message: message},
        ),
        returnValueForMissingStub: null,
      );
  @override
  _i8.Future<void> showDialog({
    _i2.Option<List<_i7.NavigationServiceDialogAction>>? actions =
        const _i2.None(),
    required String? message,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showDialog,
          [],
          {
            #actions: actions,
            #message: message,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
  @override
  _i8.Future<void> showModalBottomSheet({
    required _i9.Widget? child,
    required dynamic backgroundColor,
  }) =>
      (super.noSuchMethod(
        Invocation.method(
          #showModalBottomSheet,
          [],
          {
            #child: child,
            #backgroundColor: backgroundColor,
          },
        ),
        returnValue: _i8.Future<void>.value(),
        returnValueForMissingStub: _i8.Future<void>.value(),
      ) as _i8.Future<void>);
}
